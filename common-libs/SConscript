import os

Import('env', 'debug', 'compiler')

#New environment for commons
commonsenv = env.Clone()

# Initialize environment
commonsenv.Decider('MD5-timestamp')

if debug == 1:
    commonsenv['CFLAGS'] += ' -O0 -g'
else:
    commonsenv['CFLAGS'] += ' -O3 '

# Compile containers/cprops objects but ONLY those used for our libraries
cpropsenv = commonsenv.Clone()
cpropsenv['CFLAGS'] += ' -D_REENTRANT -D_GNU_SOURCE -DHAVE_CONFIG_H'
cpropsenv.Decider('MD5-timestamp')

if debug == 1:
    cpropsenv['CFLAGS'] += ' -O0 -g'
else:
    cpropsenv['CFLAGS'] += ' -O3 '

# Compile commons/sqlite objects
sqliteenv = commonsenv.Clone()
sqliteenv['CFLAGS'] += ' -DHAVE_CONFIG_H -fPIC -DPIC'
sqliteenv.Decider('MD5-timestamp')

if debug == 1:
    sqliteenv['CFLAGS'] += ' -O0 -g'
else:
    sqliteenv['CFLAGS'] += ' -O2 '

# Compile commons/argtable objects
argtableenv = commonsenv.Clone()
argtableenv['CFLAGS'] += ' -DHAVE_CONFIG_H -fPIC -DPIC'
argtableenv.Decider('MD5-timestamp')

if debug == 1:
    argtableenv['CFLAGS'] += ' -O0 -g'
else:
    argtableenv['CFLAGS'] += ' -O2 '

# Compile commons/config objects
configenv = commonsenv.Clone()
configenv['CFLAGS'] += ' -DHAVE_CONFIG_H -D_REENTRANT -Wall -Wshadow -Wextra -Wdeclaration-after-statement -Wno-unused-parameter'
configenv.Decider('MD5-timestamp')

# Compile commons/config objects
configenv = commonsenv.Clone()
configenv['CFLAGS'] += ' -DHAVE_CONFIG_H -D_REENTRANT -Wall -Wshadow -Wextra -Wdeclaration-after-statement -Wno-unused-parameter'
configenv.Decider('MD5-timestamp')

if debug == 1:
    configenv['CFLAGS'] += ' -O0 -g'
else:
    configenv['CFLAGS'] += ' -O2 '


# Compile commons/config objects
janssonenv = commonsenv.Clone()
janssonenv['CFLAGS'] +=  ' -DHAVE_CONFIG_H -Wall -Wextra -Wdeclaration-after-statement -fPIC -DPIC'
janssonenv['CPPPATH'] += ['commons/jansson/']
janssonenv.Decider('MD5-timestamp')

if debug == 1:
    janssonenv['CFLAGS'] += ' -O0 -g'
else:
    janssonenv['CFLAGS'] += ' -O2 '

# Targets
commons_obj = commonsenv.Object(Glob('commons/*.c'))
containers_obj = commonsenv.Object(Glob('containers/*.c'))
cprops_obj = cpropsenv.Object(['containers/cprops/avl.c', 'containers/cprops/collection.c', 'containers/cprops/hashlist.c', 'containers/cprops/hashtable.c', 'containers/cprops/heap.c', 'containers/cprops/linked_list.c', 'containers/cprops/log.c', 'containers/cprops/mempool.c', 'containers/cprops/rb.c', 'containers/cprops/util.c', 'containers/cprops/vector.c', 'containers/cprops/trie.c', 'containers/cprops/mtab.c'])
sqlite_obj = sqliteenv.Object(Glob('commons/sqlite/*.c'))
argtable_obj = argtableenv.Object(Glob('commons/argtable/*.c'))
config_obj = configenv.Object(Glob('commons/config/*.c'))
jansson_obj = janssonenv.Object(Glob('commons/jansson/*.c'))

# Objects
commonsenv['objects'] += commons_obj + containers_obj + cprops_obj + sqlite_obj + argtable_obj + config_obj + jansson_obj
commonsenv.Library('common', commonsenv['objects'])

# Run tests
containers_test = SConscript("containers/test/SConscript", exports = ['commonsenv'] )
